# type: ignore  # Prevent issues with auto-linting snakefiles

import os
from pathlib import Path
import os.path as op

# Get list of region names from geojson files
def get_regions():
    geojsons_dir = config['geojsons_dir']
    return [Path(f).stem for f in os.listdir(geojsons_dir) if f.endswith('.geojson')]

# Define final output targets
rule all:
    input:
        lai_outputs = [
                op.join(config['output_base_dir'], 'logs' , f"estimate_lai_{region}_{config['timepoints'][year]['start_date']}__{config['timepoints'][year]['end_date']}_done.txt")
                for year in config["timepoints"]
                for region in get_regions()
            ],
        merged_lai_outputs = [
            op.join(config['output_base_dir'], 'logs', f"merge_lai_{config['timepoints'][year]['start_date']}__{config['timepoints'][year]['end_date']}_done.txt")
            for year in config["timepoints"]
        ] if config['merge_regions_lai'] == True else []


# Rule to export Sentinel-2 data from GEE to Google Drive and download it automatically
rule export_s2_gdrive:
    input:
        lambda wildcards: os.path.join(config['geojsons_dir'], f"{wildcards.region_name}.geojson")
    params:
        library = config['geojsons_dir'],
        resolution = config['resolution'],
        ee_project = config['ee_project'],
        gdrive_credentials_path = config['gdrive_credentials_path'],
        local_storage_dir = os.path.join(config['output_base_dir'], 'gee_mosaics'),
    output:
        op.join(config['output_base_dir'], 'logs' , 's2_export_{region_name}_{start_date}__{end_date}_done.txt')
    shell:
        """
        mkdir -p "{params.local_storage_dir}" && \
        python 1_1_gee_export_S2.py --project {params.ee_project} --library {params.library} --region {wildcards.region_name} \
        --start-date "{wildcards.start_date}" --end-date "{wildcards.end_date}" --resolution {params.resolution} \
        --gdrive-credentials {params.gdrive_credentials_path} --download-folder {params.local_storage_dir} && touch {output}
        """

# Rule to standardize the exported Sentinel-2 data as VRTS if it was split in multiple files
rule standardize_s2_gee:
    input:
        op.join(config['output_base_dir'], 'logs', 's2_export_{region_name}_{start_date}__{end_date}_done.txt')
    params:
        resolution = config['resolution'],
        input_dir = lambda wildcards: op.join(config['output_base_dir'], 'gee_mosaics', f'{wildcards.region_name}_{config["resolution"]}m'),
        output_dir = op.join(config['output_base_dir'], 'standardized_mosaics'),
    output:
        op.join(config['output_base_dir'], 'logs' , 'standardize_s2_gee_{region_name}_{start_date}__{end_date}_done.txt')
    shell:
        """
        mkdir -p "{params.output_dir}" && \
        python 1_3_standardize_S2.py {wildcards.region_name} {params.input_dir} {params.output_dir} {params.resolution} \
        && touch {output}
        """

# Rule to estimate LAI from the standardized Sentinel-2 data
rule estimate_lai:
    input:
        op.join(config['output_base_dir'], 'logs' , 'standardize_s2_gee_{region_name}_{start_date}__{end_date}_done.txt')
    params:
        resolution = config['resolution'],
        input_dir = op.join(config['output_base_dir'], 'standardized_mosaics'),
        lai_dir = op.join(config['output_base_dir'], 'lai'),
    output:
        op.join(config['output_base_dir'], 'logs', 'estimate_lai_{region_name}_{start_date}__{end_date}_done.txt')
    shell:
        """
        mkdir -p "{params.lai_dir}" && \
        python 2_primary_LAI_GEE.py {params.input_dir} {params.lai_dir} {wildcards.region_name} {params.resolution} --start_date {wildcards.start_date} --end_date {wildcards.end_date} \
        && touch {output}
        """

# Rule to merge LAI estimates for all regions into daily VRTs
rule merge_lai:
    input:
        all_regions = lambda wildcards: expand(op.join(config['output_base_dir'], 'logs', 'estimate_lai_{region_name}_{start_date}__{end_date}_done.txt'), 
            region_name=get_regions(),
            start_date=wildcards.start_date,
            end_date=wildcards.end_date

        )
    params:
        lai_dir = op.join(config['output_base_dir'], 'lai'),
        output_dir = op.join(config['output_base_dir'], 'merged_lai'),
        resolution = config['resolution'],
        region_out_prefix = config['combined_region_name'],  
    output:
        op.join(config['output_base_dir'], 'logs', 'merge_lai_{start_date}__{end_date}_done.txt')
    shell:
        """
        mkdir -p "{params.output_dir}" && \
        python ../2_build_daily_vrts.py {params.lai_dir} {params.output_dir} {params.resolution} --start-date {wildcards.start_date} --end-date {wildcards.end_date} --region-out-prefix {params.region_out_prefix} \
        && touch {output}
        """